1. In your own words, explain what clean code is and why it is important.

Answer: Clean code in my words is code that's easiest for future engineers to read and use. So this implies the code is well structured, not repetitive, notes describing complex code where needed, and ultimately it's not bug-prone. Bug-prone code would have lots of unneccessary functions, or one function that should be broken into numerous functions, not easy to read, and full of unneeded logic.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Answer: Read the article, and wow what a responsiblity we have as developers when the software being used is directly correlated to the safety of its user. Another example I thought of is amusement park rides. The software used to accelerate rides and move the ride and a certain angle and certain velocity etc, could be detrimental to users.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION convertTemperature(x, y)               
  IF y = "F" THEN                          
    SET fahrenheit to (xâˆ’32) * (5/9)                 
    PRINT z                       
  ELSE IF y = "C" THEN          
    SET celcius to x * 1.8000 + 32.00   
    PRINT z                       
  END IF
END FUNCTION

Answer: Not clean code, refactored: changed function name, proper nesting, got rid of unnecessary comments, named existing variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calculatePercent(sum, total)
  IF NOT(total = 0) THEN
    SET percentage to sum / total * 100
    PRINT percentage
  ELSE
    PRINT "Sorry, cannot divide by 0"
  END IF
END FUNCTION

Answer: Not clean code, refactored: changed function name, proper nesting, moved print Percentage 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
  SET total to subTotal * discountRate + (subTotal * tax)
  SET change to amount - subTotal * discountRate + (subTotal * tax)
  PRINT "Your total due is: " + total
  IF paymentType = 'CASH' THEN
    CALL getPayment RETURNING amount
    PRINT "Change due: " + change 
  ELSE paymentType = 'CREDIT CARD' THEN
    CALL getPayment RETURNING amount
    PRINT "Your credit card has been charged: " + total
  END IF
END FUNCTION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
  SET goodStatus to guest.accountActive AND guest.hasOverdueBooks = 0 AND guest.outstandingFees = 0
  IF goodStatus THEN
    APPEND book to guest.books
    SET book.status to "Checked Out"
    PRINT "Your books have been issued."
  ELSE 
    PRINT "Unable to check out book."
  END IF
END FUNCTION 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount
  FUNCTION displayBalance
    PRINT balance
  END FUNCTION

  FUNCTION deposit(amount)
    SET balance to balance + amount
  END FUNCTION

  FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
  END FUNCTION
END CLASS

CLASS Credit Card
  FUNCTION creditCardOffer
    IF NOT(customer.hasCreditCard) THEN
      CALL offerCreditCard
    END
  END FUNCTION

  FUNCTION checkStatus
    IF NOT(customer.hasCheckingAccount) THEN
      CALL offerCheckingAccount
    END
  END FUNCTION
END CLASS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Programming Questions

6. Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.
Answer:

function sumIsPerfectSquare(arr){
  var s = 0;
  for (let i=0; i<arr.length; i++){
    s = s + arr[i];
  }
  if ((Math.sqrt(s)%1) == 0){
    return Math.sqrt(s);
  } else {
    return s;
  }
}
var arr = [10,1,4,6,1,1,2];
console.log(sumIsPerfectSquare(arr));

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function findDuplicates(arr) {
  let newArr = [];
  arr.forEach(function(element, index) {    
    if (arr.indexOf(element, index + 1) > -1) {
      if (newArr.indexOf(element) === -1) {
        newArr.push(element);
      }
    }
  });
  if (newArr.length != 0){
    console.log(true);
  } else {
    console.log(false);
  }
}
console.log(findDuplicates([1, 2, 3, 1]) );






































